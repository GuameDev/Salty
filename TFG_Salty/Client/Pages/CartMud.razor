@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Cesta de la compra</PageTitle>

<MudText Typo="Typo.h3">Cesta de la compra</MudText>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}

else
{

    <MudGrid Spacing="2" Justify="Justify.Center">


        @foreach (var product in cartProducts)
        {
            <MudItem xl="12" xs="12">


                <MudCard Outlined=true Class="pa-4 mr-16">
                    <MudCardHeader>
                        <MudText Typo="Typo.h4"> <a href="/product/@product.ProductId">@product.Title</a> </MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudItem>
                            <MudImage Src="@product.ImageUrl"></MudImage>
                        </MudItem>
                        <MudItem>

                            <MudText Typo="Typo.h5">@product.ProductType</MudText>
                            @*<MudNumericField Class="d-flex justify-start flex-grow-1 gap-4" @bind-Value="@product.Quantity" onchange="@((ChangeEventArgs e) => UpdateQuantity(e,product))" Label="Cantidad" Variant="Variant.Text" Min="1" Max="10"></MudNumericField>*@
                            <MudText Typo="Typo.subtitle2"> Cantidad</MudText>
                            <input  type="number" value=@product.Quantity @onchange="@((ChangeEventArgs e) => UpdateQuantity(e,product))" min="1" style="border-radius: 30px"/>
                        </MudItem>

                        <MudItem>
                            <MudText Typo="Typo.h5"> @(product.Price * product.Quantity)€ </MudText>
                        </MudItem>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Icon="@Icons.Material.Filled.Logout"
                           Color=Color.Error
                           Variant="Variant.Filled"
                           OnClick="@(()=> RemoveProductFromCart(product.ProductId,product.ProductTypeId))">Borrar producto</MudButton>

                    </MudCardActions>



                </MudCard>
            </MudItem>
        }

    @if (isUserAuthenticated)
    {
        <MudItem xl="12" xs="12">


            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Dirección de envío</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <AddressForm></AddressForm>
                </MudCardContent>

                
            </MudCard>

        </MudItem>
    }

        <MudItem xl="12" xs="12">
        <MudCard>
            <MudCardHeader>

                <MudItem>
                    <MudText Typo="Typo.h3"> Total (@cartProducts.Count): @cartProducts.Sum(product => @product.Price*product.Quantity)€</MudText>
                </MudItem>
            </MudCardHeader>
            <MudCardContent>
                <MudButton ButtonType="ButtonType.Button"
                       Color=Color.Success
                       Variant="Variant.Filled"
                       OnClick="PlaceOrder"> Realizar pedidos</MudButton>
            </MudCardContent>
        </MudCard>
       

    </MudItem>


    </MudGrid>
}



@code {
    List<CartProductResponseDTO> cartProducts = null;
    string message = "Cargando productos...";

    //Flag para comprobar si el usuario está autenticado y así poder enseñar el EditForm o no.
    //Esto debemos hacerlo así ya que no podemos ejecutar directamente el método en el html a pelo,
    //lo ejecutamos en el OnInitializeAsync y en función del resultado actualizamos el flag
    bool isUserAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isUserAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();

    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "La cesta está vacía.";

        }

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDTO product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}